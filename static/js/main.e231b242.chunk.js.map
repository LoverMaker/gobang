{"version":3,"sources":["engine/game/chess/ChessType.ts","engine/util/winUtils.ts","engine/game/chess/ChessBoard.ts","engine/game/state/Observable.ts","engine/game/state/AbstractState.ts","engine/game/state/NotStartedState.ts","engine/game/chess/Chess.ts","engine/game/chess/ChessFactory.ts","engine/game/state/NextWhiteState.ts","engine/game/state/NextBlackState.ts","engine/game/state/BlackWinState.ts","engine/game/state/WhiteWinState.ts","engine/game/state/OverState.ts","engine/game/state/GameState.ts","engine/game/state/GameContext.ts","engine/player/Player.ts","engine/player/WhitePlayer.ts","engine/player/BlackPlayer.ts","engine/game/HumanGame.ts","component/Chessman.tsx","component/Avatar.tsx","engine/game/chess/Position.ts","component/GameBoard.tsx","route/AppLayout.jsx","route/index.js","App.tsx","serviceWorker.ts","index.tsx"],"names":["ChessType","FiveDirection","ChessBoard","board","Array","rowNum","colNum","this","i","row","j","push","EMPTY","chess","position","type","checkPosition","col","isFive","totalCount","length","count","reset","HORIZONTAL","VERTICAL","x","y","RIGHT_SLANT","LEFT_SLANT","NONE","Observable","list","listener","state","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","value","stateChange","err","return","five","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","onWin","AbstractState","gameContext","context","NotStartedState","setGameState","GameState","NEXT_BLACK","OVER","Chess","Object","classCallCheck","ChessFactory","BLACK","WHITE","NextWhiteState","success","whitePlayer","dropChess","chessSteps","splice","NEXT_WHITE","checkGameState","setChess","newWhiteChess","NextBlackState","blackPlayer","newBlackChess","BlackWinState","WhiteWinState","OverState","NOT_STARTED","BLACK_WIN","WHITE_WIN","GameContext","_this","possibleConstructorReturn","getPrototypeOf","call","gameState","setContext","notifyStateChange","newBoard","start","stop","fivePosition","direction","winType","found","console","log","findFivePosition","getChessBoard","notifyWin","Player","getType","WhitePlayer","BlackPlayer","HumanGame","Chessman","handleClick","e","preventDefault","stopPropagation","_this$props","props","isLast","size","marginTop","marginLeft","className","isLastClass","isFiveClass","react_default","a","createElement","concat","style","width","height","onClick","React","Component","Avatar","right","justifyContent","text","white","player","isComputer","alignItems","playerText","Position","GameBoard","game","handleStartClick","isStarted","clientY","offsetTop","clientX","offsetLeft","clientWidth","offset","step","Math","floor","toast_default","info","getChessSteps","isFiveItem","fiveArray","index","p","addListener","assertThisInitialized","startGame","setState","_this2","chessMen","boardSize","min","document","body","item","Number","src_component_Chessman","key","src_component_Avatar","ref","button_default","inline","marginRight","disabled","AppLayout","renderContent","backgroundColor","textAlign","top","display","color","selectedTab","hidden","fullScreen","zIndex","tab_bar_default","unselectedTintColor","tintColor","barTintColor","Item","icon","background","selectedIcon","title","dot","selected","onPress","src_component_GameBoard","badge","data-seed","uri","AppRouter","react_router_dom","react_router","path","route_AppLayout","App","route","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uKAAKA,iRAMUA,ICHHC,EDGGD,IEgDAE,mDA/CXC,MAAkC,IAAIC,WACtCC,OAAiB,QACjBC,OAAiB,0DAGbC,KAAKJ,MAAQ,GACb,IAAK,IAAIK,EAAI,EAAGA,EAAID,KAAKF,OAAQG,IAAK,CAElC,IADA,IAAMC,EAAM,GACHC,EAAI,EAAGA,EAAIH,KAAKD,OAAQI,IAC7BD,EAAIE,KAAKX,EAAUY,OAEvBL,KAAKJ,MAAMQ,KAAKF,qCAIfI,GAAuB,IAGpBC,EAAmBD,EAAnBC,SAAUC,EAASF,EAATE,KAClB,SAAKR,KAAKS,cAAcF,IAAaP,KAAKJ,MAAMW,EAASL,KAAKK,EAASG,OAASjB,EAAUY,SAG1FL,KAAKJ,MAAMW,EAASL,KAAKK,EAASG,KAAOF,GAClC,qCAGDF,GAAuB,IAGrBC,EAAmBD,EAAnBC,SAAUC,EAASF,EAATE,KAClB,SAAKR,KAAKS,cAAcF,IAAaP,KAAKJ,MAAMW,EAASL,KAAKK,EAASG,OAASF,KAGhFR,KAAKJ,MAAMW,EAASL,KAAKK,EAASG,KAAOjB,EAAUY,OAC5C,yCAGGE,GAEV,QAASA,EAASL,IAAM,GAAKK,EAASL,IAAMF,KAAKF,QAAUS,EAASG,IAAM,GAAKH,EAASG,IAAMV,KAAKD,gDAInG,OAAOC,KAAKJ,yBD/CRF,4JA0BZ,IAAMiB,EAAS,SAAUf,EAAmBY,EAAiBN,EAAaQ,GAQtE,IANA,IAAME,EAAahB,EAAMiB,OACrBC,EAAQ,EAENC,EAAQ,kBAAMD,EAAQ,GAGnBb,EAAIS,EAAM,EAAGT,EAAIW,GAClBhB,EAAMM,GAAKD,KAAOO,EADYP,IAIlCa,GAAS,EAKb,IAAK,IAAIb,EAAIS,EAAM,EAAGT,GAAK,GACnBL,EAAMM,GAAKD,KAAOO,EADIP,IAI1Ba,IAGJ,GAAIA,GAAS,EAAG,OAAOpB,EAAcsB,WAGrCD,IACA,IAAK,IAAId,EAAIC,EAAM,EAAGD,EAAIW,GAClBhB,EAAMK,GAAGS,KAASF,EADYP,IAIlCa,IAGJ,IAAK,IAAIb,EAAIC,EAAM,EAAGD,EAAI,GAClBL,EAAMK,GAAGS,KAASF,EADGP,IAIzBa,IAGJ,GAAIA,GAAS,EAAG,OAAOpB,EAAcuB,SAErCF,IAEA,IAAK,IAAId,EAAI,GAASA,IAAK,CACvB,IAAMiB,EAAIhB,EAAMD,EAAGkB,EAAIT,EAAMT,EAC7B,GAAIiB,GAAKN,GAAcO,GAAKP,EACxB,MAEJ,GAAIhB,EAAMsB,GAAGC,KAAOX,EAChB,MAEJM,IAGJ,IAAK,IAAIb,EAAI,GAASA,IAAK,CACvB,IAAMiB,EAAIhB,EAAMD,EAAGkB,EAAIT,EAAMT,EAC7B,GAAIiB,EAAI,GAAKC,EAAI,EACb,MAEJ,GAAIvB,EAAMsB,GAAGC,KAAOX,EAChB,MAEJM,IAEJ,GAAIA,GAAS,EAAG,OAAOpB,EAAc0B,YAGrCL,IAEA,IAAK,IAAId,EAAI,GAASA,IAAK,CACvB,IAAMiB,EAAIhB,EAAMD,EAAGkB,EAAIT,EAAMT,EAC7B,GAAIiB,EAAI,GAAKC,EAAI,GAAKD,GAAKN,GAAcO,GAAKP,EAC1C,MAEJ,GAAIhB,EAAMsB,GAAGC,KAAOX,EAChB,MAEJM,IAGJ,IAAK,IAAIb,EAAI,GAASA,IAAK,CACvB,IAAMiB,EAAIhB,EAAMD,EAAGkB,EAAIT,EAAMT,EAC7B,GAAIiB,EAAI,GAAKC,EAAI,GAAKD,GAAKN,GAAcO,GAAKP,EAC1C,MAEJ,GAAIhB,EAAMsB,GAAGC,KAAOX,EAChB,MAEJM,IAGJ,OAAIA,GAAS,EAAUpB,EAAc2B,WAE9B3B,EAAc4B,MEzHKC,mDAC1BC,KAA6B,2DACjBC,GACRzB,KAAKwB,KAAKpB,KAAKqB,6CAEDC,GAAsB,IAAAC,GAAA,EAAAC,GAAA,EAAAC,OAAAC,EAAA,IACpC,QAAAC,EAAAC,EAAkBhC,KAAKwB,KAAvBS,OAAAC,cAAAP,GAAAI,EAAAC,EAAAG,QAAAC,MAAAT,GAAA,EAA6B,CAAAI,EAAAM,MACpBC,YAAYZ,IAFe,MAAAa,GAAAX,GAAA,EAAAC,EAAAU,EAAA,YAAAZ,GAAA,MAAAK,EAAAQ,QAAAR,EAAAQ,SAAA,WAAAZ,EAAA,MAAAC,sCAM9BH,EAAsBe,GAAuB,IAAAC,GAAA,EAAAC,GAAA,EAAAC,OAAAd,EAAA,IACnD,QAAAe,EAAAC,EAAkB9C,KAAKwB,KAAvBS,OAAAC,cAAAQ,GAAAG,EAAAC,EAAAX,QAAAC,MAAAM,GAAA,EAA6B,CAAAG,EAAAR,MACpBU,MAAMrB,EAAOe,IAF6B,MAAAF,GAAAI,GAAA,EAAAC,EAAAL,EAAA,YAAAG,GAAA,MAAAI,EAAAN,QAAAM,EAAAN,SAAA,WAAAG,EAAA,MAAAC,aCZ7BI,mDAChBC,0EACQC,GACdlD,KAAKiD,YAAcC,WCeZC,oLAhBD5C,GACN,OAAO,mCAEFA,GACL,OAAO,kCAIPP,KAAKiD,YAAYG,aAAaC,EAAUC,2CAIxCtD,KAAKiD,YAAYG,aAAaC,EAAUE,aAblBP,GCQfQ,EANZ,SAAAA,EAAYhD,EAAiBD,GAAoBkD,OAAAC,EAAA,EAAAD,CAAAzD,KAAAwD,GAAAxD,KAFjDQ,UAEgD,EAAAR,KADhDO,cACgD,EAC5CP,KAAKQ,KAAOA,EACZR,KAAKO,SAAWA,GCKRoD,6GARUpD,GAClB,OAAO,IAAIiD,EAAM/D,EAAUmE,MAAOrD,yCAEhBA,GACjB,OAAO,IAAIiD,EAAM/D,EAAUoE,MAAOtD,YCwB3BuD,oLA3BDvD,GACN,IAAMwD,EAAU/D,KAAKiD,YAAYe,YAAYC,UAAU1D,GAMvD,OALIwD,IACA/D,KAAKiD,YAAYiB,WAAWC,OAAOnE,KAAKiD,YAAYiB,WAAWrD,OAAS,EAAE,GAC1Eb,KAAKiD,YAAYG,aAAaC,EAAUe,YACxCpE,KAAKiD,YAAYoB,kBAEdN,mCAEFxD,GACL,IAAMwD,EAAU/D,KAAKiD,YAAYe,YAAYM,SAAS/D,GAOtD,OANIwD,IACA/D,KAAKiD,YAAYiB,WAAW9D,KAAKuD,EAAaY,cAAchE,IAC5DP,KAAKiD,YAAYG,aAAaC,EAAUC,YACxCtD,KAAKiD,YAAYoB,kBAGdN,0EAlBcf,GC4BdwB,oLA3BDjE,GACN,IAAMwD,EAAU/D,KAAKiD,YAAYwB,YAAYR,UAAU1D,GAMvD,OALIwD,IACA/D,KAAKiD,YAAYiB,WAAWC,OAAOnE,KAAKiD,YAAYiB,WAAWrD,OAAS,EAAE,GAC1Eb,KAAKiD,YAAYG,aAAaC,EAAUC,YACxCtD,KAAKiD,YAAYoB,kBAEdN,mCAEFxD,GACL,IAAMwD,EAAU/D,KAAKiD,YAAYwB,YAAYH,SAAS/D,GAMtD,OALIwD,IACA/D,KAAKiD,YAAYiB,WAAW9D,KAAKuD,EAAae,cAAcnE,IAC5DP,KAAKiD,YAAYG,aAAaC,EAAUe,YACxCpE,KAAKiD,YAAYoB,kBAEdN,0EAjBcf,GCcd2B,oLAfDpE,GACN,OAAO,mCAGFA,GACL,OAAO,0EANayC,GCgBb4B,oLAfDrE,GACN,OAAO,mCAGFA,GACL,OAAO,0EANayC,GCgBb6B,oLAfDtE,GACN,OAAO,mCAGFA,GACL,OAAO,0EANSyC,GCIlBK,sCACYyB,YAA+B,IAAI3B,EAD/CE,EAEYe,WAA6B,IAAIN,EAF7CT,EAGYC,WAA6B,IAAIkB,EAH7CnB,EAIY0B,UAA2B,IAAIJ,EAJ3CtB,EAKY2B,UAA2B,IAAIJ,EAL3CvB,EAMYE,KAAkB,IAAIsB,EAGzBxB,QCqEA4B,cAlEX,SAAAA,EAAYR,EAA0BT,GAA0B,IAAAkB,EAAA,OAAAzB,OAAAC,EAAA,EAAAD,CAAAzD,KAAAiF,IAC5DC,EAAAzB,OAAA0B,EAAA,EAAA1B,CAAAzD,KAAAyD,OAAA2B,EAAA,EAAA3B,CAAAwB,GAAAI,KAAArF,QANJyE,iBAKgE,EAAAS,EAJhElB,iBAIgE,EAAAkB,EAHhEhC,QAAyB,IAAIvD,EAGmCuF,EAFhEhB,WAA2B,GAEqCgB,EADxDI,eACwD,EAE5DJ,EAAKT,YAAcA,EACnBS,EAAKlB,YAAcA,EACnBkB,EAAKT,YAAYc,WAAWL,EAAKhC,SACjCgC,EAAKlB,YAAYuB,WAAWL,EAAKhC,SACjCgC,EAAK9B,aAAaC,EAAUyB,aANgCI,4EAS5CI,GACZA,IAActF,KAAKsF,YACnBtF,KAAKsF,UAAYA,EACjBtF,KAAKsF,UAAUC,WAAWvF,MAC1BA,KAAKwF,kBAAkBxF,KAAKsF,mDAKhC,OAAOtF,KAAKsF,2CAGA/E,GACZ,IAAMwD,EAAU/D,KAAKsF,UAAUhB,SAAS/D,GAExC,OADAP,KAAKqE,iBACEN,oCAGMxD,GACb,OAAOP,KAAKsF,UAAUrB,UAAU1D,mCAIhCP,KAAKkD,QAAQuC,WACbzF,KAAKsF,UAAUI,uCAIf1F,KAAKsF,UAAUK,gDAIf,IAAMC,EbsEW,SAAChG,GAItB,IAHA,IAAIiG,EAAYnG,EAAc4B,KAC1Bf,EAAW,CAACL,KAAM,EAAGQ,KAAM,GAC3BoF,EAAUrG,EAAUY,MACfJ,EAAI,EAAGA,EAAIL,EAAMiB,OAAQZ,IAC9B,IAAK,IAAIE,EAAI,EAAGA,EAAIP,EAAMK,GAAGY,OAAQV,IAAK,CACtC,IAAMK,EAAOZ,EAAMK,GAAGE,GACtB,GAAIK,IAASf,EAAUY,QACnBwF,EAAYlF,EAAOf,EAAOY,EAAMP,EAAGE,MACjBT,EAAc4B,KAAM,CAClCf,EAAW,CAACL,IAAKD,EAAGS,IAAKP,GACzB2F,EAAUtF,EACV,OAMhB,OAAIqF,IAAcnG,EAAc4B,KAAa,CAACyE,OAAO,EAAOD,UAASvF,SAAU,KAC/EyF,QAAQC,IAAIJ,EAAWtF,GACnBsF,IAAcnG,EAAcsB,WACrB,CACH+E,OAAO,EACPD,UACAvF,SAAU,CACNA,EACA,CAACL,IAAKK,EAASL,IAAKQ,IAAKH,EAASG,IAAM,GACxC,CAACR,IAAKK,EAASL,IAAKQ,IAAKH,EAASG,IAAM,GACxC,CAACR,IAAKK,EAASL,IAAKQ,IAAKH,EAASG,IAAM,GACxC,CAACR,IAAKK,EAASL,IAAKQ,IAAKH,EAASG,IAAM,KAGhDmF,IAAcnG,EAAcuB,SACrB,CACH8E,OAAO,EACPD,UACAvF,SAAU,CACNA,EACA,CAACL,IAAKK,EAASL,IAAM,EAAGQ,IAAKH,EAASG,KACtC,CAACR,IAAKK,EAASL,IAAM,EAAGQ,IAAKH,EAASG,KACtC,CAACR,IAAKK,EAASL,IAAM,EAAGQ,IAAKH,EAASG,KACtC,CAACR,IAAKK,EAASL,IAAM,EAAGQ,IAAKH,EAASG,OAI9CmF,IAAcnG,EAAc0B,YACrB,CACH2E,OAAO,EACPD,UACAvF,SAAU,CACNA,EACA,CAACL,IAAKK,EAASL,IAAM,EAAGQ,IAAKH,EAASG,IAAM,GAC5C,CAACR,IAAKK,EAASL,IAAM,EAAGQ,IAAKH,EAASG,IAAM,GAC5C,CAACR,IAAKK,EAASL,IAAM,EAAGQ,IAAKH,EAASG,IAAM,GAC5C,CAACR,IAAKK,EAASL,IAAM,EAAGQ,IAAKH,EAASG,IAAM,KAIpDmF,IAAcnG,EAAc2B,WACrB,CACH0E,OAAO,EACPD,UACAvF,SAAU,CACNA,EACA,CAACL,IAAKK,EAASL,IAAM,EAAGQ,IAAKH,EAASG,IAAM,GAC5C,CAACR,IAAKK,EAASL,IAAM,EAAGQ,IAAKH,EAASG,IAAM,GAC5C,CAACR,IAAKK,EAASL,IAAM,EAAGQ,IAAKH,EAASG,IAAM,GAC5C,CAACR,IAAKK,EAASL,IAAM,EAAGQ,IAAKH,EAASG,IAAM,KAGjD,CAACqF,OAAO,EAAOD,UAASvF,SAAU,Ka5IhB2F,CAAiBlG,KAAKkD,QAAQiD,iBAanD,OAZAH,QAAQC,IAAIL,GACRA,EAAaG,QACTH,EAAaE,UAAYrG,EAAUoE,OACnC7D,KAAKoD,aAAaC,EAAU2B,WAC5BhF,KAAKoG,UAAUpG,KAAKsF,UAAWM,EAAarF,WACrCqF,EAAaE,UAAYrG,EAAUmE,OAC1C5D,KAAKoD,aAAaC,EAAU0B,WAC5B/E,KAAKoG,UAAUpG,KAAKsF,UAAWM,EAAarF,WAE5CP,KAAKoD,aAAaC,EAAUE,OAG7BvD,KAAKsF,kDAIZ,OAAOtF,KAAKkD,QAAQiD,wDAIpB,OAAOnG,KAAKkE,kBApEM3C,GCkBX8E,mDAxBXnD,oBACA1C,mEACW0C,GACPlD,KAAKkD,QAAUA,kCAEX1C,GACJR,KAAKQ,KAAOA,mCAEPD,GACL,SAAIP,KAAKkD,UAAWlD,KAAKsG,YACdtG,KAAKkD,QAAQoB,SAAS,IAAId,EAAMxD,KAAKsG,UAAW/F,sCAKrDA,GACN,SAAIP,KAAKkD,UAAWlD,KAAKsG,YACdtG,KAAKkD,QAAQe,UAAU,IAAIT,EAAMxD,KAAKsG,UAAW/F,aCfrDgG,oLAJP,OAAO9G,EAAUoE,aAFCwC,GCMXG,oLAJP,OAAO/G,EAAUmE,aAFCyC,GCmBXI,cAfX,SAAAA,IAAe,OAAAhD,OAAAC,EAAA,EAAAD,CAAAzD,KAAAyG,GAAAhD,OAAA0B,EAAA,EAAA1B,CAAAzD,KAAAyD,OAAA2B,EAAA,EAAA3B,CAAAgD,GAAApB,KAAArF,KACL,IAAIwG,EAAe,IAAID,kHAM7BvG,KAAK0F,2CAIL1F,KAAK2F,cAZWV,GCgCTyB,4NAhBXC,YAAc,SAACC,GACXA,EAAEC,iBACFD,EAAEE,2FAGoB,IAAAC,EAC2B/G,KAAKgH,MAA9C9G,EADc6G,EACd7G,IAAKQ,EADSqG,EACTrG,IAAKF,EADIuG,EACJvG,KAAMG,EADFoG,EACEpG,OAAQsG,EADVF,EACUE,OAAQC,EADlBH,EACkBG,KAClCC,EAAa,IAAY,KAANjH,EAAc,IACjCkH,EAAc,IAAY,KAAN1G,EAAc,IAClC2G,EAAY7G,IAASf,EAAUoE,MAAQ,iBAAmB,WAC1DyD,EAAcL,EAAS,WAAa,GACpCM,EAAc5G,EAAS,QAAU,GACvC,OAAQ6G,EAAAC,EAAAC,cAAA,OAAKL,UAAS,GAAAM,OAAKN,EAAL,KAAAM,OAAkBL,EAAlB,KAAAK,OAAiCJ,GAAeK,MAAO,CAAET,YAAWC,aAAYS,MAAOX,EAAMY,OAAQZ,GAAQa,QAAS/H,KAAK2G,qBAdlIqB,IAAMC,YCUdC,2LAjBe,IAAAnB,EACe/G,KAAKgH,MAAlCmB,EADcpB,EACdoB,MACFC,EAAiBD,EAAQ,WAAY,GACrCE,EAHgBtB,EACPuB,MAEM,eAAO,eACtBC,EAJgBxB,EACAyB,WAGM,eAAO,eAC7BC,EAAaN,EAAQ,WAAa,GAClCO,EAAaP,EAAK,IAAAR,OAAOY,EAAP,MAAAZ,OAAkBU,GAAlB,GAAAV,OAA8BU,EAA9B,MAAAV,OAAuCY,EAAvC,KACxB,OAAOf,EAAAC,EAAAC,cAAA,OAAKL,UAAU,SAASO,MAAO,CAAEQ,mBACpCZ,EAAAC,EAAAC,cAAA,OAAKL,UAAU,gBAAgBO,MAAO,CAAEa,eACpCjB,EAAAC,EAAAC,cAAA,OAAKL,UAAU,iBACfG,EAAAC,EAAAC,cAAA,QAAML,UAAU,QAAQqB,YAXnBV,IAAMC,YCHZU,EANX,SAAAA,EAAYzI,EAAaQ,GAAc+C,OAAAC,EAAA,EAAAD,CAAAzD,KAAA2I,GAAA3I,KAFvCE,SAEsC,EAAAF,KADtCU,SACsC,EAClCV,KAAKE,IAAMA,EACXF,KAAKU,IAAMA,GCsIJkI,cAjHX,SAAAA,EAAY5B,GAAe,IAAA9B,EAAA,OAAAzB,OAAAC,EAAA,EAAAD,CAAAzD,KAAA4I,IACvB1D,EAAAzB,OAAA0B,EAAA,EAAA1B,CAAAzD,KAAAyD,OAAA2B,EAAA,EAAA3B,CAAAmF,GAAAvD,KAAArF,KAAMgH,KAJV6B,UAG2B,EAAA3D,EAF3BtF,WAE2B,EAAAsF,EA0B3B4D,iBAAmB,aA1BQ5D,EAkC3ByB,YAAc,SAACC,GACX,GAAK1B,EAAK6D,WAIV,GAAI7D,EAAKtF,OAASsF,EAAK6D,UAAW,CAC9B,IAAM5H,EAAIyF,EAAEoC,QAAU9D,EAAKtF,MAAMqJ,UAC7B/H,EAAI0F,EAAEsC,QAAUhE,EAAKtF,MAAMuJ,WAC3BtB,EAAQ3C,EAAKtF,MAAMwJ,YACnBC,EAAiB,KAARxB,EACTyB,EAAe,KAARzB,EACLnH,EAAM6I,KAAKC,OAAOtI,EAAImI,GAAUC,GAAQ,EACxCpJ,EAAMqJ,KAAKC,OAAOrI,EAAIkI,GAAUC,GAAQ,EAE9CpE,EAAK2D,KAAKvE,SAAS,IAAIqE,EAASzI,EAAKQ,UAZrC+I,EAAAhC,EAAMiC,KAAK,+CApCQxE,EAoD3B+B,OAAS,SAAC/G,EAAaQ,GACnB,IAAMwD,EAAagB,EAAK2D,KAAKc,gBAC7B,GAAIzF,EAAWrD,OAAS,EAAG,CACvB,IAAMyI,EAAOpF,EAAWA,EAAWrD,OAAS,GAC5C,OAAOyI,EAAK/I,SAASL,MAAQA,GAAOoJ,EAAK/I,SAASG,MAAQA,EAE9D,OAAO,GA1DgBwE,EA4D3B0E,WAAa,SAAC1J,EAAaQ,GAAyB,IACzCmJ,EAAa3E,EAAKxD,MAAlBmI,UACP,IAAK,IAAMC,KAASD,EAAW,CAC3B,IAAME,EAAIF,EAAUC,GACpB,GAAIC,EAAE7J,MAAQA,GAAO6J,EAAErJ,MAAQA,EAC3B,OAAO,EAGf,OAAO,GAlEPwE,EAAK2D,KAAO,IAAIpC,EAChBvB,EAAK2D,KAAKmB,YAAVvG,OAAAwG,EAAA,EAAAxG,CAAAyB,IACAA,EAAKxD,MAAQ,CACT4D,UAAWjC,EAAUyB,YACrB+E,UAAW,IANQ3E,mFAUvBlF,KAAK6I,KAAKqB,0CAGRxI,EAAsBe,GAExBzC,KAAKmK,SAAS,CAAC7E,UAAW5D,EAAOmI,UAAWpH,qCAGvCf,GACL1B,KAAKmK,SAAS,CAAC7E,UAAW5D,oCAGtBA,GACJ1B,KAAKmK,SAAS,CAAC7E,UAAW5D,qCAgDJ,IAAA0I,EAAApK,KAChBJ,EAAQI,KAAK6I,KAAK1C,gBACpBkE,EAAW,GACTC,EAAuD,GAA3Cf,KAAKgB,IAAIC,SAASC,KAAKrB,YAAa,KAEtD,IAAK,IAAMlJ,KAAON,EACd,IAAK,IAAMc,KAAOd,EAAMM,GAAM,CAC1B,IAAMwK,EAAO9K,EAAMM,GAAKQ,GACxB,GAAIgK,IAASjL,EAAUY,MAAO,CAC1B,IAAM4G,EAASjH,KAAKiH,OAAO0D,OAAOzK,GAAMyK,OAAOjK,IACzCC,EAASX,KAAK4J,WAAWe,OAAOzK,GAAMyK,OAAOjK,IACnDsF,QAAQC,IAAItF,EAAQT,EAAKQ,GACzB2J,EAASjK,KAAKoH,EAAAC,EAAAC,cAACkD,EAAD,CAAU1D,KAAMoD,EAAY,GAAIrD,OAAQA,EAAQtG,OAAQA,EAAQH,KAAMkK,EAC5DG,IAAG,GAAAlD,OAAKzH,EAAL,KAAAyH,OAAYjH,GAAOR,IAAKyK,OAAOzK,GAAMQ,IAAKiK,OAAOjK,OAIxF,OAAO8G,EAAAC,EAAAC,cAAA,OAAKL,UAAU,WAClBG,EAAAC,EAAAC,cAACoD,EAAD,CAAQtC,YAAY,IACpBhB,EAAAC,EAAAC,cAAA,OAAKqD,IAAK,SAAAnL,GAAK,OAAIwK,EAAKxK,MAAQA,GAAOyH,UAAU,QAAQO,MAAO,CAACC,MAAOyC,EAAWxC,OAAQwC,GACtFvC,QAAS/H,KAAK2G,aACd0D,GAEL7C,EAAAC,EAAAC,cAACoD,EAAD,CAAQ3C,OAAK,EAACG,OAAK,EAACE,YAAY,IAChChB,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAAsD,EAAAvD,EAAA,CAAQjH,KAAK,UAAUyK,QAAM,EAAC/D,KAAK,QAAQU,MAAO,CAACsD,YAAa,OAAQC,SAAUnL,KAAK+I,UAC/EhB,QAAS/H,KAAK8I,kBADtB,kEAMApH,GACJA,IAAU2B,EAAU0B,WACpB0E,EAAAhC,EAAM1D,QAAQ,4BAEdrC,IAAU2B,EAAU2B,WACpByE,EAAAhC,EAAM1D,QAAQ,4BAElB/D,KAAKmK,SAAS,CAAE7E,UAAW5D,sCAhFf,IACL4D,EAAatF,KAAK0B,MAAlB4D,UACP,OAAOA,IAAcjC,EAAUC,YAAcgC,IAAcjC,EAAUe,kBAnCrD4D,IAAMC,WCoFfmD,cArGb,SAAAA,EAAYpE,GAAO,IAAA9B,EAAA,OAAAzB,OAAAC,EAAA,EAAAD,CAAAzD,KAAAoL,IACjBlG,EAAAzB,OAAA0B,EAAA,EAAA1B,CAAAzD,KAAAyD,OAAA2B,EAAA,EAAA3B,CAAA2H,GAAA/F,KAAArF,KAAMgH,KAQRqE,cAAgB,WACd,OACE7D,EAAAC,EAAAC,cAAA,OAAKE,MAAO,CAAE0D,gBAAiB,QAASxD,OAAQ,OAAQD,MAAO,OAAQ0D,UAAW,SAAUhL,SAAU,WAAYiL,IAAK,IAAKC,QAAS,OAAQhD,WAAY,SAAUL,eAAgB,SAAUsD,MAAO,SAApM,2GATFxG,EAAKxD,MAAQ,CACXiK,YAAa,QACbC,QAAQ,EACRC,YAAY,GALG3G,wEAiBV,IAAAkF,EAAApK,KACP,OACEwH,EAAAC,EAAAC,cAAA,OAAKE,MAAO,CAAErH,SAAU,QAASuH,OAAQ,OAAQD,MAAO,OAAQ2D,IAAK,EAAGM,OAAQ,MAC9EtE,EAAAC,EAAAC,cAAAqE,EAAAtE,EAAA,CACEuE,oBAAoB,UACpBC,UAAU,UACVC,aAAa,QACbN,OAAQ5L,KAAK0B,MAAMkK,QAEnBpE,EAAAC,EAAAC,cAAAqE,EAAAtE,EAAQ0E,KAAR,CACEC,KACE5E,EAAAC,EAAAC,cAAA,OAAKE,MAAO,CACVC,MAAO,OACPC,OAAQ,OACRuE,WAAY,gHAGhBC,aACE9E,EAAAC,EAAAC,cAAA,OAAKE,MAAO,CACVC,MAAO,OACPC,OAAQ,OACRuE,WAAY,gHAGhBE,MAAM,qBACN1B,IAAI,SACJ2B,KAAG,EACHC,SAAqC,aAA3BzM,KAAK0B,MAAMiK,YACrBe,QAAS,WACPtC,EAAKD,SAAS,CACZwB,YAAa,eAIfnE,EAAAC,EAAAC,cAACiF,EAAD,OAEJnF,EAAAC,EAAAC,cAAAqE,EAAAtE,EAAQ0E,KAAR,CACEC,KACE5E,EAAAC,EAAAC,cAAA,OAAKE,MAAO,CACVC,MAAO,OACPC,OAAQ,OACRuE,WAAY,mHAGhBC,aACE9E,EAAAC,EAAAC,cAAA,OAAKE,MAAO,CACVC,MAAO,OACPC,OAAQ,OACRuE,WAAY,mHAGhBE,MAAM,2BACN1B,IAAI,SACJ+B,MAAO,MACPH,SAAqC,WAA3BzM,KAAK0B,MAAMiK,YACrBe,QAAS,WACPtC,EAAKD,SAAS,CACZwB,YAAa,YAGjBkB,YAAU,UAET7M,KAAKqL,iBAGR7D,EAAAC,EAAAC,cAAAqE,EAAAtE,EAAQ0E,KAAR,CACEC,KAAM,CAAEU,IAAK,oEACbR,aAAc,CAAEQ,IAAK,oEACrBP,MAAM,eACN1B,IAAI,KACJ4B,SAAqC,cAA3BzM,KAAK0B,MAAMiK,YACrBe,QAAS,WACPtC,EAAKD,SAAS,CACZwB,YAAa,gBAIhB3L,KAAKqL,0BA/FMrD,IAAMC,WCYf8E,EAZG,kBAChBvF,EAAAC,EAAAC,cAACsF,EAAA,EAAD,KACExF,EAAAC,EAAAC,cAACuF,EAAA,EAAD,KACEzF,EAAAC,EAAAC,cAACuF,EAAA,EAAD,CAAOC,KAAK,KACV1F,EAAAC,EAAAC,cAACyF,EAAD,UCEOC,EANO,WACpB,OACE5F,EAAAC,EAAAC,cAAC2F,EAAD,OCMgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOpG,EAAAC,EAAAC,cAACmG,EAAD,MAASrD,SAASsD,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.e231b242.chunk.js","sourcesContent":["enum ChessType {\r\n    EMPTY = 0,\r\n    BLACK = 1,\r\n    WHITE = 2\r\n}\r\n\r\nexport default ChessType","import ChessType from \"../game/chess/ChessType\";\r\nimport Position from \"../game/chess/Position\";\r\n\r\nexport enum FiveDirection {\r\n    // 无\r\n    NONE = 0,\r\n    // 水平\r\n    HORIZONTAL,\r\n    // 垂直\r\n    VERTICAL,\r\n    // 左斜\r\n    LEFT_SLANT,\r\n    // 右斜\r\n    RIGHT_SLANT\r\n}\r\n\r\nexport interface FivePosition {\r\n    found: boolean,\r\n    winType: ChessType\r\n    position: Position[]\r\n}\r\n\r\n/**\r\n * 是否五子连珠\r\n * @param board\r\n * @param type\r\n * @param row\r\n * @param col\r\n */\r\nconst isFive = function (board: number[][], type: ChessType, row: number, col: number): FiveDirection {\r\n    // 行列大小\r\n    const totalCount = board.length;\r\n    let count = 1;\r\n\r\n    const reset = () => count = 1\r\n\r\n    // [row, col]该点右边连珠数量\r\n    for (let i = col + 1; i < totalCount; i++) {\r\n        if (board[row][i] !== type) {\r\n            break\r\n        }\r\n        count += 1\r\n    }\r\n\r\n\r\n    // [row, col]该点左边连珠数量\r\n    for (let i = col - 1; i >= 0; i--) {\r\n        if (board[row][i] !== type) {\r\n            break\r\n        }\r\n        count++;\r\n    }\r\n\r\n    if (count >= 5) return FiveDirection.HORIZONTAL;\r\n\r\n    //纵向\r\n    reset();\r\n    for (let i = row + 1; i < totalCount; i++) {\r\n        if (board[i][col] !== type) {\r\n            break\r\n        }\r\n        count++;\r\n    }\r\n\r\n    for (let i = row - 1; i > 0; i--) {\r\n        if (board[i][col] !== type) {\r\n            break\r\n        }\r\n        count++;\r\n    }\r\n\r\n    if (count >= 5) return FiveDirection.VERTICAL;\r\n    // 右斜方向 \\\\\r\n    reset();\r\n\r\n    for (let i = 1; true; i++) {\r\n        const x = row + i, y = col + i;\r\n        if (x >= totalCount || y >= totalCount) {\r\n            break;\r\n        }\r\n        if (board[x][y] !== type) {\r\n            break\r\n        }\r\n        count++;\r\n    }\r\n\r\n    for (let i = 1; true; i++) {\r\n        const x = row - i, y = col - i;\r\n        if (x < 0 || y < 0) {\r\n            break;\r\n        }\r\n        if (board[x][y] !== type) {\r\n            break\r\n        }\r\n        count++;\r\n    }\r\n    if (count >= 5) return FiveDirection.RIGHT_SLANT;\r\n\r\n    // 左斜方向 //\r\n    reset();\r\n\r\n    for (let i = 1; true; i++) {\r\n        const x = row + i, y = col - i;\r\n        if (x < 0 || y < 0 || x >= totalCount || y >= totalCount) {\r\n            break;\r\n        }\r\n        if (board[x][y] !== type) {\r\n            break\r\n        }\r\n        count++;\r\n    }\r\n\r\n    for (let i = 1; true; i++) {\r\n        const x = row - i, y = col + i;\r\n        if (x < 0 || y < 0 || x >= totalCount || y >= totalCount) {\r\n            break;\r\n        }\r\n        if (board[x][y] !== type) {\r\n            break\r\n        }\r\n        count++;\r\n    }\r\n\r\n    if (count >= 5) return FiveDirection.LEFT_SLANT;\r\n\r\n    return FiveDirection.NONE;\r\n\r\n}\r\n\r\n// 找到五子连珠的点\r\nconst findFivePosition = (board: number[][]): FivePosition => {\r\n    let direction = FiveDirection.NONE\r\n    let position = {row: -1, col: -1}\r\n    let winType = ChessType.EMPTY\r\n    for (let i = 0; i < board.length; i++) {\r\n        for (let j = 0; j < board[i].length; j++) {\r\n            const type = board[i][j]\r\n            if (type !== ChessType.EMPTY) {\r\n                direction = isFive(board, type, i, j)\r\n                if (direction !== FiveDirection.NONE) {\r\n                    position = {row: i, col: j}\r\n                    winType = type\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    if (direction === FiveDirection.NONE) return {found: false, winType, position: []};\r\n    console.log(direction, position)\r\n    if (direction === FiveDirection.HORIZONTAL) {\r\n        return {\r\n            found: true,\r\n            winType,\r\n            position: [\r\n                position,\r\n                {row: position.row, col: position.col - 1},\r\n                {row: position.row, col: position.col - 2},\r\n                {row: position.row, col: position.col - 3},\r\n                {row: position.row, col: position.col - 4}]\r\n        }\r\n    }\r\n    if (direction === FiveDirection.VERTICAL) {\r\n        return {\r\n            found: true,\r\n            winType,\r\n            position: [\r\n                position,\r\n                {row: position.row - 1, col: position.col},\r\n                {row: position.row - 2, col: position.col},\r\n                {row: position.row - 3, col: position.col},\r\n                {row: position.row - 4, col: position.col}]\r\n        }\r\n    }\r\n    // \\\\\r\n    if (direction === FiveDirection.RIGHT_SLANT) {\r\n        return {\r\n            found: true,\r\n            winType,\r\n            position: [\r\n                position,\r\n                {row: position.row - 1, col: position.col - 1},\r\n                {row: position.row - 2, col: position.col - 2},\r\n                {row: position.row - 3, col: position.col - 3},\r\n                {row: position.row - 4, col: position.col - 4}]\r\n        }\r\n    }\r\n    // //\r\n    if (direction === FiveDirection.LEFT_SLANT) {\r\n        return {\r\n            found: true,\r\n            winType,\r\n            position: [\r\n                position,\r\n                {row: position.row - 1, col: position.col + 1},\r\n                {row: position.row - 2, col: position.col + 2},\r\n                {row: position.row - 3, col: position.col + 3},\r\n                {row: position.row - 4, col: position.col + 4}]\r\n        }\r\n    }\r\n    return {found: false, winType, position: []}\r\n}\r\n\r\nexport {\r\n    findFivePosition,\r\n}","// 棋盘类\r\nimport ChessType from \"./ChessType\";\r\nimport Chess from \"./Chess\";\r\nimport Position from \"./Position\";\r\nimport ActionContext from \"../ActionContext\";\r\n\r\nclass ChessBoard implements ActionContext {\r\n    board : Array<Array<ChessType>> = new Array<Array<ChessType>>()\r\n    rowNum: number = 15\r\n    colNum: number = 15\r\n\r\n    newBoard(): void {\r\n        this.board = []\r\n        for (let i = 0; i < this.rowNum; i++) {\r\n            const row = []\r\n            for (let j = 0; j < this.colNum; j++) {\r\n                row.push(ChessType.EMPTY)\r\n            }\r\n            this.board.push(row)\r\n        }\r\n    }\r\n\r\n    setChess(chess: Chess): boolean {\r\n        // 位置不合法\r\n        // 当前位置不为空\r\n        const { position, type } = chess\r\n        if (!this.checkPosition(position) || this.board[position.row][position.col] !== ChessType.EMPTY) {\r\n            return false\r\n        }\r\n        this.board[position.row][position.col] = type\r\n        return true\r\n    }\r\n\r\n    dropChess(chess: Chess): boolean {\r\n        // 位置不合法\r\n        // 当前位置不为空\r\n        const { position, type } = chess\r\n        if (!this.checkPosition(position) || this.board[position.row][position.col] !== type) {\r\n            return false\r\n        }\r\n        this.board[position.row][position.col] = ChessType.EMPTY\r\n        return true\r\n    }\r\n\r\n    checkPosition(position: Position) {\r\n        // 位置不合法\r\n        return !(position.row < 0 || position.row > this.rowNum || position.col < 0 || position.col > this.colNum)\r\n    }\r\n\r\n    getChessBoard(): Array<Array<ChessType>> {\r\n        return this.board;\r\n    }\r\n}\r\n\r\nexport default ChessBoard","import StateListener from \"./StateListener\";\r\nimport AbstractState from \"./AbstractState\";\r\nimport Position from \"../chess/Position\";\r\n\r\nexport default abstract class Observable {\r\n    list :Array<StateListener> = []\r\n    addListener(listener: StateListener) {\r\n        this.list.push(listener)\r\n    }\r\n    notifyStateChange(state: AbstractState) {\r\n        for(const item of this.list) {\r\n            item.stateChange(state)\r\n        }\r\n    }\r\n\r\n    notifyWin(state: AbstractState, five: Array<Position>) {\r\n        for(const item of this.list) {\r\n            item.onWin(state, five)\r\n        }\r\n    }\r\n}","import Position from \"../chess/Position\";\r\nimport GameContext from \"./GameContext\";\r\n\r\nexport default abstract class AbstractState {\r\n    protected gameContext!: GameContext\r\n    public setContext(context: GameContext):void {\r\n        this.gameContext = context\r\n    }\r\n    abstract start(): void\r\n    abstract setChess(position: Position): boolean\r\n    abstract dropChess(position: Position): boolean\r\n    abstract stop(): void\r\n\r\n}","import AbstractState from \"./AbstractState\"\r\nimport Position from \"../chess/Position\";\r\nimport GameState from \"./GameState\";\r\n\r\nclass NotStartedState extends AbstractState{\r\n    dropChess(position: Position): boolean {\r\n        return false\r\n    }\r\n    setChess(position: Position): boolean {\r\n        return false\r\n    }\r\n\r\n    start(): void {\r\n        this.gameContext.setGameState(GameState.NEXT_BLACK)\r\n    }\r\n\r\n    stop(): void {\r\n        this.gameContext.setGameState(GameState.OVER)\r\n    }\r\n}\r\n\r\nexport default NotStartedState","import ChessType from \"./ChessType\"\r\nimport Position from \"./Position\";\r\n\r\nclass Chess {\r\n   type: ChessType\r\n   position: Position\r\n   constructor(type: ChessType, position: Position){\r\n       this.type = type\r\n       this.position = position;\r\n   }\r\n}\r\n\r\nexport default Chess","import Chess from \"./Chess\";\r\nimport ChessType from \"./ChessType\";\r\nimport Position from \"./Position\";\r\n\r\nclass ChessFactory {\r\n    static newBlackChess(position: Position): Chess {\r\n       return new Chess(ChessType.BLACK, position)\r\n    }\r\n    static newWhiteChess(position: Position): Chess {\r\n        return new Chess(ChessType.WHITE, position)\r\n    }\r\n}\r\n\r\nexport default ChessFactory","import AbstractState from \"./AbstractState\";\r\nimport Position from \"../chess/Position\";\r\nimport ChessFactory from \"../chess/ChessFactory\";\r\nimport GameState from \"./GameState\";\r\n\r\nclass NextWhiteState extends AbstractState {\r\n    dropChess(position: Position): boolean {\r\n        const success = this.gameContext.whitePlayer.dropChess(position)\r\n        if (success) {\r\n            this.gameContext.chessSteps.splice(this.gameContext.chessSteps.length - 1,1);\r\n            this.gameContext.setGameState(GameState.NEXT_WHITE)\r\n            this.gameContext.checkGameState()\r\n        }\r\n        return success\r\n    }\r\n    setChess(position: Position): boolean {\r\n        const success = this.gameContext.whitePlayer.setChess(position)\r\n        if (success) {\r\n            this.gameContext.chessSteps.push(ChessFactory.newWhiteChess(position))\r\n            this.gameContext.setGameState(GameState.NEXT_BLACK)\r\n            this.gameContext.checkGameState()\r\n        }\r\n\r\n        return success\r\n    }\r\n\r\n    start(): void {\r\n    }\r\n\r\n    stop(): void {\r\n    }\r\n}\r\n\r\nexport default NextWhiteState","import AbstractState from \"./AbstractState\";\r\nimport Position from \"../chess/Position\";\r\nimport GameState from \"./GameState\";\r\nimport ChessFactory from \"../chess/ChessFactory\";\r\n\r\nclass NextBlackState extends AbstractState {\r\n    dropChess(position: Position): boolean {\r\n        const success = this.gameContext.blackPlayer.dropChess(position)\r\n        if (success) {\r\n            this.gameContext.chessSteps.splice(this.gameContext.chessSteps.length - 1,1);\r\n            this.gameContext.setGameState(GameState.NEXT_BLACK)\r\n            this.gameContext.checkGameState()\r\n        }\r\n        return success\r\n    }\r\n    setChess(position: Position): boolean {\r\n        const success = this.gameContext.blackPlayer.setChess(position)\r\n        if (success) {\r\n            this.gameContext.chessSteps.push(ChessFactory.newBlackChess(position))\r\n            this.gameContext.setGameState(GameState.NEXT_WHITE)\r\n            this.gameContext.checkGameState()\r\n        }\r\n        return success\r\n    }\r\n\r\n\r\n    start(): void {\r\n    }\r\n\r\n    stop(): void {\r\n    }\r\n}\r\n\r\nexport default NextBlackState","import AbstractState from \"./AbstractState\";\r\nimport Position from \"../chess/Position\";\r\n\r\nclass BlackWinState extends AbstractState {\r\n    dropChess(position: Position): boolean {\r\n        return false\r\n    }\r\n\r\n    setChess(position: Position): boolean {\r\n        return false\r\n    }\r\n\r\n    start(): void {\r\n    }\r\n\r\n    stop(): void {\r\n    }\r\n}\r\n\r\nexport default BlackWinState","import AbstractState from \"./AbstractState\";\r\nimport Position from \"../chess/Position\";\r\n\r\nclass WhiteWinState extends AbstractState {\r\n    dropChess(position: Position): boolean {\r\n        return false\r\n    }\r\n\r\n    setChess(position: Position): boolean {\r\n        return false\r\n    }\r\n\r\n    start(): void {\r\n    }\r\n\r\n    stop(): void {\r\n    }\r\n}\r\n\r\nexport default WhiteWinState","import AbstractState from \"./AbstractState\";\r\nimport Position from \"../chess/Position\";\r\n\r\nclass OverState extends AbstractState {\r\n    dropChess(position: Position): boolean {\r\n        return false\r\n    }\r\n\r\n    setChess(position: Position): boolean {\r\n        return false\r\n    }\r\n\r\n    start(): void {\r\n    }\r\n\r\n    stop(): void {\r\n    }\r\n}\r\n\r\nexport default OverState","import NotStartedState from \"./NotStartedState\";\r\nimport NextWhiteState from \"./NextWhiteState\";\r\nimport NextBlackState from \"./NextBlackState\";\r\nimport BlackWinState from \"./BlackWinState\";\r\nimport WhiteWinState from \"./WhiteWinState\";\r\nimport OverState from \"./OverState\";\r\n\r\nclass GameState {\r\n    public static NOT_STARTED: NotStartedState = new NotStartedState()\r\n    public static NEXT_WHITE: NextWhiteState = new NextWhiteState()\r\n    public static NEXT_BLACK: NextBlackState = new NextBlackState()\r\n    public static BLACK_WIN: BlackWinState = new BlackWinState()\r\n    public static WHITE_WIN: WhiteWinState = new WhiteWinState()\r\n    public static OVER: OverState = new OverState()\r\n}\r\n\r\nexport default GameState","import BlackPlayer from \"../../player/BlackPlayer\";\r\nimport WhitePlayer from \"../../player/WhitePlayer\";\r\nimport AbstractState from \"./AbstractState\";\r\nimport Position from \"../chess/Position\";\r\nimport ActionContext from \"../ActionContext\";\r\nimport ChessBoard from \"../chess/ChessBoard\";\r\nimport {findFivePosition} from \"../../util/winUtils\";\r\nimport ChessType from \"../chess/ChessType\";\r\nimport Observable from \"./Observable\";\r\nimport GameState from \"./GameState\";\r\nimport Chess from \"../chess/Chess\";\r\n\r\n\r\nclass GameContext extends Observable {\r\n    blackPlayer: BlackPlayer\r\n    whitePlayer: WhitePlayer\r\n    context: ActionContext = new ChessBoard()\r\n    chessSteps: Array<Chess> = []\r\n    private gameState!: AbstractState\r\n    constructor(blackPlayer: BlackPlayer, whitePlayer: WhitePlayer) {\r\n        super();\r\n        this.blackPlayer = blackPlayer\r\n        this.whitePlayer = whitePlayer\r\n        this.blackPlayer.setContext(this.context)\r\n        this.whitePlayer.setContext(this.context)\r\n        this.setGameState(GameState.NOT_STARTED)\r\n    }\r\n\r\n    public setGameState(gameState: AbstractState): void {\r\n        if (gameState !== this.gameState) {\r\n            this.gameState = gameState\r\n            this.gameState.setContext(this)\r\n            this.notifyStateChange(this.gameState)\r\n        }\r\n    }\r\n\r\n    public getGameState(): AbstractState {\r\n        return this.gameState\r\n    }\r\n\r\n    public setChess(position: Position): boolean {\r\n        const success = this.gameState.setChess(position)\r\n        this.checkGameState()\r\n        return success\r\n    }\r\n\r\n    public dropChess(position: Position): boolean {\r\n        return this.gameState.dropChess(position)\r\n    }\r\n\r\n    protected start() {\r\n        this.context.newBoard()\r\n        this.gameState.start()\r\n    }\r\n\r\n    protected stop() {\r\n        this.gameState.stop()\r\n    }\r\n\r\n    checkGameState(): AbstractState {\r\n        const fivePosition = findFivePosition(this.context.getChessBoard())\r\n        console.log(fivePosition)\r\n        if (fivePosition.found) {\r\n            if (fivePosition.winType === ChessType.WHITE) {\r\n                this.setGameState(GameState.WHITE_WIN)\r\n                this.notifyWin(this.gameState, fivePosition.position)\r\n            } else if (fivePosition.winType === ChessType.BLACK) {\r\n                this.setGameState(GameState.BLACK_WIN)\r\n                this.notifyWin(this.gameState, fivePosition.position)\r\n            } else {\r\n                this.setGameState(GameState.OVER)\r\n            }\r\n        }\r\n        return this.gameState\r\n    }\r\n\r\n    public getChessBoard(): Array<Array<ChessType>> {\r\n        return this.context.getChessBoard()\r\n    }\r\n\r\n    public getChessSteps(): Array<Chess> {\r\n        return this.chessSteps\r\n    }\r\n}\r\n\r\nexport default GameContext","import ActionContext from \"../game/ActionContext\";\r\nimport ChessType from \"../game/chess/ChessType\";\r\nimport IPlayer from \"./IPlayer\";\r\nimport Chess from \"../game/chess/Chess\";\r\nimport Position from \"../game/chess/Position\";\r\n\r\nabstract class Player implements IPlayer {\r\n    context!: ActionContext\r\n    type!: ChessType\r\n    setContext(context: ActionContext) {\r\n        this.context = context\r\n    }\r\n    setType(type: ChessType) {\r\n        this.type = type\r\n    }\r\n    setChess(position: Position): boolean {\r\n        if (this.context && this.getType()) {\r\n            return this.context.setChess(new Chess(this.getType(), position))\r\n        }\r\n        return false\r\n    }\r\n\r\n    dropChess(position: Position): boolean {\r\n        if (this.context && this.getType()) {\r\n            return this.context.dropChess(new Chess(this.getType(), position))\r\n        }\r\n        return false;\r\n    }\r\n    abstract getType(): ChessType;\r\n}\r\n\r\nexport default Player","import Player from \"./Player\";\r\nimport ChessType from \"../game/chess/ChessType\";\r\n\r\nclass WhitePlayer extends Player {\r\n    getType(): ChessType {\r\n        return ChessType.WHITE;\r\n    }\r\n}\r\n\r\nexport default WhitePlayer","import Player from \"./Player\";\r\nimport ChessType from \"../game/chess/ChessType\";\r\n\r\nclass BlackPlayer extends Player{\r\n    getType(): ChessType {\r\n        return ChessType.BLACK;\r\n    }\r\n}\r\n\r\nexport default BlackPlayer","\r\nimport GameContext from \"./state/GameContext\";\r\nimport IGame from \"./IGame\";\r\nimport WhitePlayer from \"../player/WhitePlayer\";\r\nimport BlackPlayer from \"../player/BlackPlayer\";\r\n\r\nclass HumanGame extends GameContext implements IGame {\r\n    constructor() {\r\n        super(new BlackPlayer(), new WhitePlayer())\r\n    }\r\n    pauseGame(): void {\r\n    }\r\n\r\n    startGame(): void {\r\n        this.start()\r\n    }\r\n\r\n    stopGame(): void {\r\n        this.stop()\r\n    }\r\n}\r\n\r\nexport default HumanGame","import React from 'react'\r\nimport ChessType from \"../engine/game/chess/ChessType\";\r\nimport './Chessman.less'\r\n\r\ninterface IProps {\r\n    row: number,\r\n    col: number,\r\n    size: number,\r\n    isLast: boolean\r\n    isFive: boolean\r\n    type: ChessType\r\n}\r\n\r\ninterface IState {\r\n\r\n}\r\n\r\n/**\r\n * 棋子\r\n */\r\nclass Chessman extends React.Component<IProps, IState> {\r\n\r\n    handleClick = (e: React.MouseEvent) => {\r\n        e.preventDefault()\r\n        e.stopPropagation()\r\n    }\r\n\r\n    render(): React.ReactNode {\r\n        const { row, col, type, isFive, isLast, size } = this.props\r\n        const marginTop = (1.5 + row * 6.53) + '%'\r\n        const marginLeft = (1.5 + col * 6.53) + '%'\r\n        const className = type === ChessType.WHITE ? 'chessman white' : 'chessman'\r\n        const isLastClass = isLast ? 'lastStep' : ''\r\n        const isFiveClass = isFive ? 'fives' : ''\r\n        return (<div className={`${className} ${isLastClass} ${isFiveClass}`} style={{ marginTop, marginLeft, width: size, height: size }} onClick={this.handleClick} />)\r\n    }\r\n}\r\n\r\nexport default Chessman","import React from 'react'\r\nimport './Avatar.less'\r\n\r\ninterface IProps {\r\n    right?: boolean\r\n    white?: boolean\r\n    isComputer: boolean\r\n}\r\n\r\ninterface IState {\r\n}\r\n\r\nclass Avatar extends React.Component<IProps, IState> {\r\n    render(): React.ReactNode {\r\n        const { right, white, isComputer } = this.props\r\n        const justifyContent = right ? 'flex-end': ''\r\n        const text = white ? '白棋' : '黑棋'\r\n        const player = isComputer ? '电脑' : '玩家'\r\n        const alignItems = right ? 'flex-end' : ''\r\n        const playerText = right ? `[${player}] ${text}` : `${text} [${player}]`\r\n        return <div className=\"avatar\" style={{ justifyContent }}>\r\n            <div className=\"image-wrapper\" style={{ alignItems }}>\r\n                <div className=\"image person\" />\r\n                <span className=\"text\">{playerText}</span>\r\n            </div>\r\n\r\n        </div>;\r\n    }\r\n}\r\n\r\nexport default Avatar","class Position {\r\n    row: number\r\n    col: number\r\n    constructor(row: number, col: number) {\r\n        this.row = row\r\n        this.col = col\r\n    }\r\n}\r\n\r\nexport default Position","import React from 'react'\r\nimport {Button, Toast} from 'antd-mobile'\r\nimport HumanGame from \"../engine/game/HumanGame\";\r\nimport './GameBoard.less'\r\nimport Chessman from \"./Chessman\";\r\nimport ChessType from \"../engine/game/chess/ChessType\";\r\nimport Avatar from \"./Avatar\";\r\nimport StateListener from \"../engine/game/state/StateListener\";\r\nimport AbstractState from \"../engine/game/state/AbstractState\";\r\nimport GameState from \"../engine/game/state/GameState\";\r\nimport IGame from \"../engine/game/IGame\";\r\nimport Position from '../engine/game/chess/Position'\r\n\r\ninterface IProps {\r\n\r\n}\r\n\r\ninterface IState {\r\n    gameState: AbstractState\r\n    fiveArray: Position[]\r\n}\r\n\r\nclass GameBoard extends React.Component<IProps, IState> implements StateListener {\r\n    game: IGame\r\n    board?: HTMLDivElement | null\r\n\r\n    constructor(props: IProps) {\r\n        super(props)\r\n        this.game = new HumanGame()\r\n        this.game.addListener(this)\r\n        this.state = {\r\n            gameState: GameState.NOT_STARTED,\r\n            fiveArray: []\r\n        }\r\n    }\r\n    componentDidMount(): void {\r\n        this.game.startGame()\r\n    }\r\n\r\n    onWin(state: AbstractState, five: Array<Position>): void {\r\n\r\n        this.setState({gameState: state, fiveArray: five})\r\n    }\r\n\r\n    onUpdate(state: AbstractState): void {\r\n        this.setState({gameState: state})\r\n    }\r\n\r\n    onStart(state: AbstractState): void {\r\n        this.setState({gameState: state})\r\n    }\r\n\r\n    handleStartClick = () => {\r\n    }\r\n\r\n    get isStarted() {\r\n        const {gameState} = this.state\r\n        return gameState === GameState.NEXT_BLACK || gameState === GameState.NEXT_WHITE\r\n    }\r\n\r\n    handleClick = (e: React.MouseEvent) => {\r\n        if (!this.isStarted) {\r\n            Toast.info('请点击开始游戏')\r\n            return\r\n        }\r\n        if (this.board && this.isStarted) {\r\n            const y = e.clientY - this.board.offsetTop,\r\n                x = e.clientX - this.board.offsetLeft,\r\n                width = this.board.clientWidth,\r\n                offset = width * 0.044,\r\n                step = width * 0.065;\r\n            const col = Math.floor((x + offset) / step) - 1\r\n            const row = Math.floor((y + offset) / step) - 1\r\n\r\n            this.game.setChess(new Position(row, col))\r\n\r\n        }\r\n    }\r\n    isLast = (row: number, col: number): boolean => {\r\n        const chessSteps = this.game.getChessSteps()\r\n        if (chessSteps.length > 0) {\r\n            const step = chessSteps[chessSteps.length - 1]\r\n            return step.position.row === row && step.position.col === col\r\n        }\r\n        return false\r\n    }\r\n    isFiveItem = (row: number, col: number): boolean => {\r\n        const {fiveArray} = this.state\r\n        for (const index in fiveArray) {\r\n            const p = fiveArray[index]\r\n            if (p.row === row && p.col === col) {\r\n                return true\r\n            }\r\n        }\r\n        return false\r\n    }\r\n\r\n    render(): React.ReactNode {\r\n        const board = this.game.getChessBoard()\r\n        let chessMen = []\r\n        const boardSize = Math.min(document.body.clientWidth, 500) * 0.9\r\n\r\n        for (const row in board) {\r\n            for (const col in board[row]) {\r\n                const item = board[row][col]\r\n                if (item !== ChessType.EMPTY) {\r\n                    const isLast = this.isLast(Number(row), Number(col))\r\n                    const isFive = this.isFiveItem(Number(row), Number(col))\r\n                    console.log(isFive, row, col)\r\n                    chessMen.push(<Chessman size={boardSize / 18} isLast={isLast} isFive={isFive} type={item}\r\n                                            key={`${row}-${col}`} row={Number(row)} col={Number(col)}/>)\r\n                }\r\n            }\r\n        }\r\n        return <div className=\"content\">\r\n            <Avatar isComputer={true}/>\r\n            <div ref={board => this.board = board} className=\"board\" style={{width: boardSize, height: boardSize}}\r\n                 onClick={this.handleClick}>\r\n                {chessMen}\r\n            </div>\r\n            <Avatar right white isComputer={false}/>\r\n            <div>\r\n                <Button type=\"primary\" inline size=\"small\" style={{marginRight: '4px'}} disabled={this.isStarted}\r\n                        onClick={this.handleStartClick}>开始游戏</Button>\r\n            </div>\r\n        </div>;\r\n    }\r\n\r\n    stateChange(state: AbstractState): void {\r\n        if (state === GameState.BLACK_WIN) {\r\n            Toast.success('黑棋胜利')\r\n        }\r\n        if (state === GameState.WHITE_WIN) {\r\n            Toast.success('白棋胜利')\r\n        }\r\n        this.setState({ gameState: state })\r\n    }\r\n}\r\n\r\nexport default GameBoard\r\n","import React from 'react'\r\nimport { TabBar } from 'antd-mobile';\r\nimport GameBoard from \"../component/GameBoard\";\r\n\r\nclass AppLayout extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      selectedTab: 'apply',\r\n      hidden: false,\r\n      fullScreen: false,\r\n    };\r\n  }\r\n\r\n  renderContent = () => {\r\n    return (\r\n      <div style={{ backgroundColor: 'white', height: '100%', width: '100%', textAlign: 'center', position: 'absolute', top: '0', display: 'flex', alignItems: 'center', justifyContent: 'center', color: 'gray' }}>\r\n        敬请期待，小哥哥正在火热开发中……\r\n      </div>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div style={{ position: 'fixed', height: '100%', width: '100%', top: 0, zIndex: 1000 }}>\r\n        <TabBar\r\n          unselectedTintColor=\"#949494\"\r\n          tintColor=\"#33A3F4\"\r\n          barTintColor=\"white\"\r\n          hidden={this.state.hidden}\r\n        >\r\n          <TabBar.Item\r\n            icon={\r\n              <div style={{\r\n                width: '22px',\r\n                height: '22px',\r\n                background: 'url(https://zos.alipayobjects.com/rmsportal/psUFoAMjkCcjqtUCNPxB.svg) center center /  21px 21px no-repeat' }}\r\n              />\r\n            }\r\n            selectedIcon={\r\n              <div style={{\r\n                width: '22px',\r\n                height: '22px',\r\n                background: 'url(https://zos.alipayobjects.com/rmsportal/IIRLrXXrFAhXVdhMWgUI.svg) center center /  21px 21px no-repeat' }}\r\n              />\r\n            }\r\n            title=\"五子棋\"\r\n            key=\"Friend\"\r\n            dot\r\n            selected={this.state.selectedTab === 'greenTab'}\r\n            onPress={() => {\r\n              this.setState({\r\n                selectedTab: 'greenTab',\r\n              });\r\n            }}\r\n          >\r\n              <GameBoard />\r\n          </TabBar.Item>\r\n          <TabBar.Item\r\n            icon={\r\n              <div style={{\r\n                width: '22px',\r\n                height: '22px',\r\n                background: 'url(https://gw.alipayobjects.com/zos/rmsportal/BTSsmHkPsQSPTktcXyTV.svg) center center /  21px 21px no-repeat' }}\r\n              />\r\n            }\r\n            selectedIcon={\r\n              <div style={{\r\n                width: '22px',\r\n                height: '22px',\r\n                background: 'url(https://gw.alipayobjects.com/zos/rmsportal/ekLecvKBnRazVLXbWOnE.svg) center center /  21px 21px no-repeat' }}\r\n              />\r\n            }\r\n            title=\"电脑设置\"\r\n            key=\"Koubei\"\r\n            badge={'new'}\r\n            selected={this.state.selectedTab === 'redTab'}\r\n            onPress={() => {\r\n              this.setState({\r\n                selectedTab: 'redTab',\r\n              });\r\n            }}\r\n            data-seed=\"logId1\"\r\n          >\r\n            {this.renderContent()}\r\n          </TabBar.Item>\r\n\r\n          <TabBar.Item\r\n            icon={{ uri: 'https://zos.alipayobjects.com/rmsportal/asJMfBrNqpMMlVpeInPQ.svg' }}\r\n            selectedIcon={{ uri: 'https://zos.alipayobjects.com/rmsportal/gjpzzcrPMkhfEqgbYvmN.svg' }}\r\n            title=\"我的\"\r\n            key=\"my\"\r\n            selected={this.state.selectedTab === 'yellowTab'}\r\n            onPress={() => {\r\n              this.setState({\r\n                selectedTab: 'yellowTab',\r\n              });\r\n            }}\r\n          >\r\n            {this.renderContent()}\r\n          </TabBar.Item>\r\n        </TabBar>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default AppLayout\r\n","import React from 'react'\r\nimport { HashRouter, Route, Switch } from 'react-router-dom'\r\nimport AppLayout from \"./AppLayout\";\r\n\r\nconst AppRouter = () => (\r\n  <HashRouter>\r\n    <Switch>\r\n      <Route path=\"/\">\r\n        <AppLayout>\r\n        </AppLayout>\r\n      </Route>\r\n    </Switch>\r\n\r\n  </HashRouter>\r\n)\r\n\r\nexport default AppRouter\r\n\r\n","import React from 'react';\nimport './App.css';\nimport AppRouter from \"./route\";\n\nconst App: React.FC = () => {\n  return (\n    <AppRouter />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}